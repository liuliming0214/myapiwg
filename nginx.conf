
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
     include       mime.types;
    default_type  application/octet-stream;

    lua_package_path "html/?.lua;;";  #lua 模块
    lua_package_cpath "lualib/?.so;;";  #c模块 

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
	resolver 223.5.5.5;  # 必须加上 否则会出现 
	lua_shared_dict shared_wg_application 64m; #定义appid应用本地缓存变量
	#默认连接池大小，默认30

	lua_socket_pool_size 30;

	#默认超时时间,默认60s

	lua_socket_keepalive_timeout 60s;
   # lua_code_cache off;		                    # 线上环境设置为on, off时可以热加载lua文件


    server {
		listen       8080;
        server_name  wg.dev.leju.com;
		
		charset utf-8;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

		
	
        location /internet_proxy {
			internal;
			proxy_set_header Accept-Encoding   '';#nginx 做代理时出现乱码时的解决方案
			set_by_lua $target "
				local urls = ngx.ctx.target_uri..'?';
				return urls;
			";
			 proxy_set_header X-Real-IP $remote_addr;
			 proxy_set_header User-Agent $http_user_agent;
			 proxy_set_header SSL '1';
			 proxy_set_header Upgrade $http_upgrade;
			 #proxy_set_header Host 'admin.laike.leju.com';
			 #开启对http1.1支持
			 proxy_set_header Connection "";
			 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			 proxy_set_header X-Forwarded-Proto $scheme;
			 
			 
			 proxy_pass $target$args;
			 proxy_http_version 1.1;
		}
		
		location /wg_goservice{
			internal;
			proxy_set_header Accept-Encoding '';#nginx 做代理时出现乱码时的解决方案
			set $target "http://localhost:8000/wg_service?";
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header User-Agent $http_user_agent;
			proxy_set_header SSL '1';
			proxy_set_header Upgrade $http_upgrade;
			#开启对http1.1支持
			proxy_set_header Connection "";
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			 
			proxy_pass $target$args;
			proxy_http_version 1.1;
		}
		
		location / {
            root   html;
            index  index.html index.htm;
        }
		location /api/router {
			proxy_http_version 1.1;
			proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
        	content_by_lua_file lua/router.lua;
			#加密配置文件 加密的时候打开
		   #header_filter_by_lua 'ngx.header.content_length = nil';
			body_filter_by_lua_file  lua/init_body.lua;
			log_by_lua_file		lua/init_log.lua;
        }
		
		location /api/int_log {
			proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Scheme $scheme;
        	content_by_lua_file lua/int_log.lua;
        }
		
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        location ~ \.php$ {
           #proxy_pass   http://127.0.0.1;
		   proxy_pass   http://www.baidu.com;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
